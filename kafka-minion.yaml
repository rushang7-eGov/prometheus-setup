---
# Source: kafka-minion/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-monion-kafka-minion
  labels:
    app.kubernetes.io/name: kafka-minion
    helm.sh/chart: kafka-minion-1.1.2
    app.kubernetes.io/instance: kafka-monion
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kafka-minion
    app.kubernetes.io/instance: kafka-monion
---
# Source: kafka-minion/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-monion-kafka-minion
  labels:
    app.kubernetes.io/name: kafka-minion
    helm.sh/chart: kafka-minion-1.1.2
    app.kubernetes.io/instance: kafka-monion
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka-minion
      app.kubernetes.io/instance: kafka-monion
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
      labels:
        app.kubernetes.io/name: kafka-minion
        app.kubernetes.io/instance: kafka-monion
    spec:
      securityContext:
        
        fsGroup: 99
        runAsUser: 99
      volumes:
      containers:
        - name: kafka-minion 
          image: "quay.io/google-cloud-tools/kafka-minion:v1.0.0"
          imagePullPolicy: IfNotPresent
          volumeMounts:
          env:
            - name: TELEMETRY_HOST
              value: "0.0.0.0"
            - name: TELEMETRY_PORT
              value: "8080"
            - name: EXPORTER_IGNORE_SYSTEM_TOPICS
              value: "true"
            - name: METRICS_PREFIX
              value: "kafka_minion"
            - name: LOG_LEVEL
              value: "info"
            - name: KAFKA_BROKERS
              value: "kafka-v2-headless.kafka-cluster:9092"
            - name: KAFKA_CONSUMER_OFFSETS_TOPIC_NAME
              value: "__consumer_offsets"
            - name: KAFKA_TLS_ENABLED
              value: "false"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            httpGet:
              path: /healthcheck
              port: http
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 60
            httpGet:
              path: /readycheck
              port: http
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
